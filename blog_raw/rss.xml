<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>yoannlr's blog</title>
<description>Latest news from yoannlr</description>
<language>en-us</language>
<link>https://yoannlr.github.io/blog/rss.xml</link>
<atom:link href="https://yoannlr.github.io/blog/rss.xml" rel="self" type="application/rss+xml" />
<item>
<title>Audio on Linux explained: ALSA, Pulse, Jack, Pipewire&#8230;</title>
<guid>https://yoannlr.github.io/blog/tut/audio_on_linux.html</guid>
<pubDate>Tue, 28 Dec 2021 14:22:19 +0100</pubDate>
<description>
<![CDATA[
<h1 id="Audio%20on%20Linux%20explained:%20ALSA,%20Pulse,%20Jack,%20Pipewire&amp;#8230;">Audio on Linux explained: ALSA, Pulse, Jack, Pipewire&#8230;</h1>
<p class="date">28 Dec 2021</p>


<p><em>This article is a small, simplified explanation of audio on Linux. Let&#39;s understand audio on Linux!</em></p>

<ul>
<li><strong>The Soundcard:</strong> in your computer, the soundcard is responsible of converting digital information, understood by the operating system, to analogic signal, used by devices (a jack headphone or microphone), and vice-versa.</li>
<li>The operating system, by itself, doesn&#39;t know how to read&#47;write bytes to the soundcard. It needs a <strong>driver</strong>.

<ul>
<li>In the early days of audio on Linux, the driver was <strong>OSS</strong> (Open Sound System), but it had some limitations and became proprietary.</li>
<li>Now, the commonly used driver is <strong>ALSA</strong> (Advanced Linux Sound Architecture).</li>
</ul></li>
<li>With these drivers, it is possible for an application to use the soundcard: VLC can output directly to ALSA.</li>
<li>However, these drivers have an important problem: they don&#39;t handle multiplexing. This means only one application can use the soundcard (microphone or speakers) at a time.</li>
<li>This problem is solved by using a <strong>sound server</strong>: it merges all audio streams into one, which it then sends to ALSA.</li>
<li>The sound server is also responsible of <strong>resampling</strong> the audio. If two streams use a different frenquency, let&#39;s say 44.1kHz and 48kHz, the server will &#8220;convert&#8221; (resample) these streams to the frequency of it&#39;s configuration, 44.1kHz for example.</li>
<li>The commonly used sound server nowadays is <strong>PulseAudio</strong>, which provides an abstraction layer to the applications. From the application point of view, they&#39;re just reading&#47;writing to PulseAudio.</li>
<li>PulseAudio even allows using multiple sound cards at once: the integraded soundcard in your computer, a USB microphone, the HDMI audio output of your graphics card, &#8230; This can be easily configured in <code>pavucontrol</code>. See picture below.</li>
<li>PulseAudio has two main limitations.

<ul>
<li>It hardly handles managing audio as a graph (eg. having an applications streaming to two sound cards).</li>
<li>It is not real-time, there&#39;s a small latency of 40-80ms.</li>
<li>These two drawbacks are irrelevant to the majority of users, but&#8230;</li>
</ul></li>
<li><strong>JACK</strong>, an alternative sound server, solves these problems. It&#39;s designed for the audio profesionnals: very low latency, flexible audio connections (with graphs if you install <code>qjackctl</code>), even MIDI support for instruments.

<ul>
<li>There are two &#8220;versions&#8221; of JACK: JACK and JACK2. JACK2 is written in C++, whereas JACK is written in C.</li>
<li>Most applications are written for PulseAudio. If you run JACK for a specific app (Ardour, for example), you will notice the other apps trying to emmit sound are like frozen. Indeed, the soundcard is used by JACK, which means PulseAudio cannot read&#47;write to it. This problem can be solved by adding <a href="https://gist.github.com/yoannlr/e55d8755e8b87ba450719f6bed30a91c">these commands</a> to the adequate events in <code>qjackctl</code>. See picture below.</li>
</ul></li>
<li>That&#39;s quite a lot of programs for audio on Linux&#8230; Now, let&#39;s introduce <strong>Pipewire</strong>. Pipewire combines the simplicity of PulseAudio and the advantages of JACK.

<ul>
<li>Pipewire can act as a drop-in replacement for PulseAudio by installing the <code>pipewire-pulse</code> addon. This should be transparent to apps, as they &#8220;think&#8221; they are interacting with PulseAudio.</li>
<li>The same applies to JACK by installing <code>pipewire-jack</code>. However, you might need to run JACK apps with the <code>pw_jack</code> command: eg. <code>pw_jack ardour6</code>.</li>
</ul></li>
<li>We&#39;ve talked about audio&#8230; video on Linux is still at the &#8220;driver step&#8221;: a webcam on Linux can only be used by one app at a time. There is no &#8220;video server&#8221; which handles multiplexing video&#8230; Well&#8230; there wasn&#39;t. Pipewire also introduces video multiplexing and native screen-sharing under the wayland display server.</li>
</ul>

<p>And&#8230; That&#39;s it! Hope it helped you get a clearer understanding of audio on Linux.</p>

<h2 id="pavucontrol">pavucontrol</h2>

<p><img src="/res/pavucontrol.png" alt="pavucontrol" /></p>

<h2 id="qjackctl%20compatiblity">qjackctl compatiblity</h2>

<p><img src="/res/qjackctl_commands.png" alt="qjackctl configutation" /></p>
]]>
</description>
</item>
<item>
<title>Ranting about modern phones</title>
<guid>https://yoannlr.github.io/blog/art/mobilephones.html</guid>
<pubDate>Mon, 23 Aug 2021 19:49:36 +0200</pubDate>
<description>
<![CDATA[
<h1 id="Ranting%20about%20modern%20phones">Ranting about modern phones</h1>
<p class="date">23 Aug 2021</p>


<h2 id="A%20brief%20timeline">A brief timeline</h2>

<p>Back in the days, I used to have a portative MP4 player.
It was simple, I could plug it to my computer, browse it&#39;s content and add new songs&#47;videos.</p>

<p>Then, I got an iPhone (4th gen, I think): to do the same thing, I had to use iTunes&#8230;</p>

<p>Then, I got my first Android phone (OnePlus X): I used to copy songs to an SD card which I then plugged into the phone.</p>

<p>For the past 2 years, I&#39;ve been using a Pixel 3.
Long story short: it&#39;s a nightmare.</p>

<ul>
<li>No jack output

<ul>
<li>I have to use a stupid USB-C to jack adapter or wireless headphones &#8212; no thanks for that last option.</li>
<li>I can&#39;t listen to music and charge the phone at the same time.</li>
<li>It&#39;s advertised as a way to make the phone thinner.
My OnePlus X is as thin if not thinner with the jack output and none of these problems.
Plus I don&#39;t care about how thick is my phone.</li>
</ul></li>
<li>No SD card slot, which means I have to use the <a href="https://wikipedia.org/wiki/Media_Transfer_Protocol">MTP</a>. It&#39;s <strong>full of bugs and almost never works</strong> (from my experience).</li>
<li>Recent Android version (9, I think). Makes me feel like I&#39;m being spied on in every way possible with all those Google things.</li>
<li>About one day of battery. I could do &#8212; and still can &#8212; at least 5 days with my OnePlus.</li>
<li>It&#39;s getting slower and slower&#8230; when it works&#8230;<sup id="fnref1"><a href="#fn1" rel="footnote">1</a></sup></li>
</ul>

<p>We used to have simple things that worked.
Now we have complex pieces of bloatware selling themselves as &#8220;intelligent devices&#8221; but that won&#39;t allow you to do what you want with them.
It&#39;s sad.</p>

<p>On my OnePlus, I flashed <a href="https://lineageos.org">Lineage OS</a> with <a href="/blog/links.html#Android%20Apps">no Google apps</a>.
Even tho it&#39;s older and has poorer specs compared to the Pixel 3, it runs <strong>way better</strong>.</p>

<p>I come to the conclusion</p>

<blockquote>
<p>People seem to thrive for technological &#8220;advancement&#8221;, but part of what they&#39;re doing is make things harder to use if not unusable.</p>
</blockquote>

<p>This applies to the real world too.
And sure, some might say &#8220;yeah we use MTP for security&#8221;, to which I&#39;d like to reply &#8220;not my problem if you plug your phone anywhere&#8221;.</p>

<h2 id="And%20a%20few%20more%20complaints%20about%20recent%20mobile%20phones">And a few more complaints about recent mobile phones</h2>

<ul>
<li>Not a tool anymore &#8212; a tool gets the work done, it does not try to seduce you</li>
<li>It gathers <a href="https://www.scss.tcd.ie/doug.leith/apple_google.pdf">considerable amount of data</a> on your usage</li>
<li>No root access means you&#39;re not the owner of your phone, the manufacturer is</li>
<li>Inefficient, bloated code (AOSP &#8212; Android Open Source Project, is around 150GB of code&#8230; for a phone operating system)</li>
<li>It has sucked life out of majority of people: look at the zombie crowd holding their phones out there!</li>
<li>More to come&#8230;</li>
</ul>

<h2 id="What%20to%20do?">What to do?</h2>

<p>I guess one could install an alternative operating system on their phone.
It would solve at least a few of the previously mentioned problems.
I&#39;m thinking about flashing my Pixel with <a href="https://calyxos.org/">Calyx OS</a> or <a href="https://grapheneos.org">Graphene OS</a>.</p>

<p>One could also take a first step into &#8220;better&#8221; phone usage by trying to switch away from all G-Apps (feaseable, I&#39;ve done it).</p>

<div class="footnotes">
<hr/>
<ol>

<li id="fn1">
<p>The reason for that seems to be a constant need of Internet for the phone to perform basic operations.
  I use <a href="https://netguard.me">NetGuard</a> to block some apps (such as Calculator, which definitely needs it&#8230;) from accessing Internet, and to use a <a href="https://wikipedia.org/wiki/Hosts_(file)">hosts file</a> which allows me to block certain domains.&#160;<a href="#fnref1" rev="footnote">&#8617;</a></p>
</li>

</ol>
</div>
]]>
</description>
</item>
<item>
<title>Retreive an APK from a non-rooted Android device</title>
<guid>https://yoannlr.github.io/blog/tut/retreive_apk.html</guid>
<pubDate>Fri, 20 Aug 2021 23:14:09 +0200</pubDate>
<description>
<![CDATA[
<h1 id="Retreive%20an%20APK%20from%20a%20non-rooted%20Android%20device">Retreive an APK from a non-rooted Android device</h1>
<p class="date">20 Aug 2021</p>


<h2 id="Context">Context</h2>

<p>I recently installed <a href="https://lineageos.org">LineageOS</a> and <a href="https://download.lineageos.org/extras">LineageOS addonsu</a> on my old OnePlus X phone to un-google it and get root access on it.
The reason I did that is simple: I bought the device, it sould be normal I get root access on it, it should not be Google&#39;s.</p>

<p>The system works perfectly.
For most apps I used, a FOSS replacement was quickly found on <a href="https://f-droid.org">F-Droid</a>, but I still faced a problem for some apps, such as Discord, Magic Earth, etc.</p>

<p>We&#39;ll focus on Magic Earth in this tutorial.
Magic Earth is not on F-Droid and doesn&#39;t provide any APK (an Android application package) elsewhere than the Google Play Store.
Sure, some websites say they&#39;ll give you &#8220;free magic earth apk no viruses no spyware&#8221;, but it seemed a little&#8230; unsafe to me.</p>

<p>The thing is, Magic Earth is installed on my current, non-rooted phone, from Google Play Store.</p>

<p>&#8220;In order to be installed, the APK file has to be downloaded, and is probably still somewhere on the phone&#8221;, I thought.</p>

<p>Turns out I was right, here is how to retreive it from the non-rooted phone, just using <a href="https://developer.android.com/studio/releases/platform-tools">adb (Android Debug Bridge)</a>.</p>

<h2 id="Installing%20ADB%20on%20a%20computer">Installing ADB on a computer</h2>

<p>Download it from the above link.</p>

<p>On most Linux distros, it is also available directly from the package manager (<code>android-tools</code> on Arch).</p>

<h2 id="Enable%20USB%20debugging%20from%20the%20device">Enable USB debugging from the device</h2>

<p>This will allow us to perform adb commands with our phone connected to a computer.</p>

<p>To do so, head to the settings app.
In the &#8220;About phone&#8221; section tap 7 times on the build number, a toast saying &#8220;You are now a developer&#8221; should appear.
Go back home on the settings app, and to &#8220;Developer options&#8221;.
From there, enable USB debugging.</p>

<h2 id="Pair%20the%20phone%20to%20the%20computer">Pair the phone to the computer</h2>

<p>Linux users might have to run the following commands as root (with sudo).</p>

<p>First, run <code>adb devices</code>.
You should get a pop-up on your phone asking to trust the computer, accept.</p>

<pre><code>me : ~ $ sudo adb devices
* daemon not running; starting now at tcp:5037
* daemon started successfully
List of devices attached
XXXXXXXXX   device
</code></pre>

<p>The device is now attached, we will be able to proceed!</p>

<h2 id="Get%20the%20package%20id">Get the package id</h2>

<p>We need to find the app&#39;s package name.
To do so, we&#39;ll list every app installed on our phone: <code>adb shell pm list packages</code></p>

<p>Which give us a list of all app packages installed.</p>

<pre><code>me : ~ $ sudo adb shell pm list packages
package:...
package:com.generalmagic.magicearth
package:...
</code></pre>

<p>💡 Linux users can use <code>grep</code> to filter the results: <code>adb shell pm list packages | grep magic</code></p>

<p>We deduce Magic Earth&#39;s package id is <code>com.generalmagic.magicearth</code>.</p>

<h2 id="Get%20the%20APK%20location">Get the APK location</h2>

<p>This information allows us to ask the device the APK&#39;s location, with one command: <code>adb shell pm path com.generalmagic.magicearth</code>.</p>

<pre><code>me : ~ $ sudo adb shell pm path com.generalmagic.magicearth
package:&#47;data&#47;app&#47;com.generalmagic.magicearth-XXXXXXXXXXXXXXXXXXXXXX==&#47;base.apk
</code></pre>

<p>It&#39;s a path we can&#39;t access on Android (unless our phone has root access), but adb can!</p>

<h2 id="Retreive%20the%20APK">Retreive the APK</h2>

<p>adb allows us to pull data from our phone, just run <code>adb pull &#60;path&#62;</code>.</p>

<pre><code>me : ~ $ sudo adb pull &#47;data&#47;app&#47;com.generalmagic.magicearth-XXXXXXXXXXXXXXXXXXxxXX==&#47;base.apk
&#47;data&#47;app&#47;com.generalmagic.magicearth-XXXXXXXXXXXXXXXXXXXXXX==&#47;base.apk: 1 file pulled, 0 skipped. 37.6 MB&#47;s (52342418 bytes in 1.326s)
</code></pre>

<p>We now have a file <code>base.apk</code> we can rename <code>magicearth.apk</code>.</p>

<p>I copied this file to my LineageOS phone, and installed it like a standard APK file.</p>
]]>
</description>
</item>
<item>
<title>Installing Arch Linux: a guide</title>
<guid>https://yoannlr.github.io/blog/tut/installing_archlinux.html</guid>
<pubDate>Fri, 20 Aug 2021 23:14:09 +0200</pubDate>
<description>
<![CDATA[
<h1 id="Installing%20Arch%20Linux:%20a%20guide">Installing Arch Linux: a guide</h1>
<p class="date">20 Aug 2021</p>


<p><img src="/res/archlinux_logo.png" alt="Arch Linux Logo" /></p>

<p>This installation guide is based on the principle you know at least a few about Linux (basic system knowledge, using a terminal environment).
<a href="https://www.archlinux.org/">Arch Linux</a> is not a Linux distro intended for everyone to use (no desktop environment by default).
It is, however, a great way to learn more about Linux.</p>

<h2 id="Creating%20bootable%20media">Creating bootable media</h2>

<p>In order to install Arch, we will first need to create a media with which we&#39;ll boot our computer.</p>

<ol start="1">
<li>Download Arch Linux disk image <a href="https://www.archlinux.org/download">here</a> (ISO file, no need to get the latest version, it&#39;s a rolling release and everything will be downloaded at install).</li>
<li>Use the <code>lsblk</code> command in a Linux terminal to identify your media.
Execute <code>lsblk</code> without your media connected, then connect it and re-run the command, it will be easier to identify your media this way.</li>
</ol>

<pre><code>me : ~ $ lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0 111.8G  0 disk 
├─sda1   8:1    0   511M  0 part &#47;boot
└─sda2   8:2    0 111.3G  0 part &#47;
sdb      8:16   0 931.5G  0 disk 
└─sdb1   8:17   0 931.5G  0 part &#47;mnt&#47;data
</code></pre>

<pre><code>me : ~ $ lsblk
NAME   MAJ:MIN RM   SIZE RO TYPE MOUNTPOINT
sda      8:0    0 111.8G  0 disk 
├─sda1   8:1    0   511M  0 part &#47;boot
└─sda2   8:2    0 111.3G  0 part &#47;
sdb      8:16   0 931.5G  0 disk 
└─sdb1   8:17   0 931.5G  0 part &#47;mnt&#47;data
sdc      8:32   1   7.5G  0 disk -- this is our media!
└─sdc1   8:33   1   7.5G  0 part 
</code></pre>

<ol start="3">
<li>We&#39;ll then need to copy the ISO image on the media.
It&#39;s a block copy, which means your media will be formatted.
From your download folder, <code>dd if=archlinux-2019.10.01-x86_64.iso of=&#47;dev&#47;sdc</code> replacing <code>sdc</code> with your media identifier.</li>
<li>Start your computer from the so created media.
You may need to select it in a boot menu or from the BIOS&#47;UEFI.</li>
</ol>

<h2 id="Installing%20Arch">Installing Arch</h2>

<p>Arch boots up a live system to a prompt <code>root@archiso ~ #</code>.</p>

<p>First thing, if you&#39;re not using qwerty, you can load another layout: example with azerty: <code>loadkeys fr</code>.</p>

<p>Then, we need to check we are connected to the Internet: <code>ping archlinux.org</code>.
To use a WiFi network, we can use the <code>wifi-menu</code> utility.</p>

<h3 id="Format%20drive">Format drive</h3>

<p>Now, we&#39;ll need to format our computer&#39;s hard drive.
Use <code>lsblk</code> to idendify it.
You may use the disk size to find it in the list (as an example, my computer has a 128G SSD, I can use this information to find the corresponding media).</p>

<p>To format it, use the cfdisk utility: <code>cfdisk &#47;dev&#47;sdx</code> with <code>sdx</code> being your disk identifier.
Remove everything (with the &#8220;[Delete]&#8220; button), at the end we need to have only &#8220;Free Space&#8221;.
Then, create two partitions (&#8220;[New]&#8220;):</p>

<ul>
<li>One of <em>EFI</em> type, of 500M.
It <strong>must</strong> be the first one you create.
It will be the boot partition, required by the UEFI system.</li>
<li>One of <em>Linux Filesystem</em> type, with the remaining space.
It will be the Linux partition (you might want to create a &#47;home and a swap partition too, but I&#39;ll not cover this here).</li>
</ul>

<p>Write changes to the disk (&#8220;[Write]&#8220;), <strong>it will erase all existing data on the disk</strong>.</p>

<p><img src="/res/cfdisk.png" alt="cfdisk screenshot" /></p>

<p>Partitions are created, now we need to format them.
Get their id with <code>lsblk</code>, it must be <code>sdxy</code>, with <code>sdx</code> being the same as earlier.</p>

<ul>
<li>EFI partition of 500M can use vfat: <code>mkfs.vfat &#47;dev&#47;sdx1</code>.</li>
<li>Linux partition can use ext4: <code>mkfs.ext4 &#47;dev&#47;sdx2</code>.</li>
</ul>

<h3 id="Mount%20the%20partitions">Mount the partitions</h3>

<p>We&#39;ll now mount the created partitions on the live system.
First, the Linux partition on <code>&#47;mnt</code>: <code>mount &#47;dev&#47;sdx2 &#47;mnt</code>.
Then, the UEFI partition on <code>&#47;boot</code> of the Linux partition: <code>mkdir &#47;mnt&#47;boot</code>, <code>mount &#47;dev&#47;sdx1 &#47;mnt&#47;boot</code>.</p>

<p>This way, we get the required configuration to install Arch!</p>

<h3 id="Launch%20the%20installation">Launch the installation</h3>

<p>It&#39;s pretty easy, just a command to run!</p>

<p><code>pacstrap -i &#47;mnt archlinux-keyring base base-devel linux-lts linux-firmware vim</code></p>

<p>It will prompt you a few choices, just hit Return on your keyboard, default options are great.</p>

<h3 id="Configuring%20the%20system">Configuring the system</h3>

<p>Create the fstab file (it tells the system how to mount disks at startup): <code>genfstab -U -p &#47;mnt &#62;&#62; &#47;mnt&#47;etc&#47;fstab</code>.</p>

<p>Then, chroot in the new system (we will now work from the disk): <code>arch-chroot &#47;mnt</code>.</p>

<p>First, we&#39;ll set the system locale (the language).
Edit <code>&#47;etc&#47;locale.gen</code> (with vim, for example): uncomment the locales you want to use (<code>en_US.UTF-8</code> in my case).
Then run <code>locale-gen</code> and <code>echo LANG=en_US.UTF-8 &#62;&#62; &#47;etc&#47;locale.conf</code>.</p>

<p>Configure the local time: <code>ln -sf &#47;usr&#47;share&#47;zoneinfo&#47;Europe&#47;Paris &#47;etc&#47;localtime</code> (for Paris time zone).</p>

<p>Give a name to your machine: <code>echo chosen_name &#62; &#47;etc&#47;hostname</code>.</p>

<p>Basic network configuration to bind &#8220;localhost&#8221; to 127.0.0.1: edit <code>&#47;etc&#47;hosts</code> to add the line <code>127.0.0.1  localhost</code>.</p>

<p>And some programs to ease network configuration later: <code>pacman -S networkmanager &#38;&#38; systemctl enable NetworkManager</code>.</p>

<h3 id="Installing%20the%20bootloader">Installing the bootloader</h3>

<p>The bootloader will allow us to start our system.
Currently, if you stop your computer, you won&#39;t be able to start the new Arch system.</p>

<p><code>bootctl install</code></p>

<p>Then, create the bootloader configuration.</p>

<p>Edit <code>&#47;boot&#47;loader&#47;entries&#47;arch.conf</code> (create it, if non-existent):</p>

<pre><code>title Arch Linux
linux &#47;vmlinuz-linux
initrd &#47;initramfs-linux.img
options root=PARTUID=&#60;uid&#62; rw
</code></pre>

<p>Two things you need to know about this configuration:</p>

<ul>
<li><code>&#47;vmlinux-linux</code> and <code>&#47;initramfs-linux.img</code> refers to files that <strong>must</strong> exist in <code>&#47;boot</code>.</li>
<li><code>&#60;uid&#62;</code> must be the Linux partition UID, get it by running <code>blkid</code>.</li>
</ul>

<p>In <code>&#47;boot&#47;loader&#47;loader.conf</code>:</p>

<pre><code>default arch
timeout 5
</code></pre>

<h3 id="Users">Users</h3>

<p>You may want to set a root password: <code>passwd</code>.</p>

<p>Then, add your main user: <code>useradd -m -g users -G wheel -s &#47;bin&#47;bash username</code>.
And give it a password: <code>passwd username</code>.</p>

<p>We can - and it&#39;s recommended - allow members of group &#8220;wheel&#8221; (which our user is part of) to use root privileges with the sudo command.
To do so: <code>EDITOR=vim visudo</code>, and uncomment the line containing <code>%wheel ALL=(ALL) ALL</code>.</p>

<h3 id="Reboot">Reboot</h3>

<p><code>exit</code> to leave the chroot environment.</p>

<p><code>umount -R &#47;mnt</code> to unmount the two partitions.</p>

<p><code>reboot</code></p>

<p>And voilà!</p>
]]>
</description>
</item>
<item>
<title>Two ways to retreive your Windows product key</title>
<guid>https://yoannlr.github.io/blog/tut/get_windows_key.html</guid>
<pubDate>Fri, 20 Aug 2021 23:14:09 +0200</pubDate>
<description>
<![CDATA[
<h1 id="Two%20ways%20to%20retreive%20your%20Windows%20product%20key">Two ways to retreive your Windows product key</h1>
<p class="date">20 Aug 2021</p>


<p>I have almost no reason to use Windows, but my laptop came with Windows 10 pre-installed on it.
I thought retreiving my Windows product key might still be useful in the future, so here are two ways you can do it.</p>

<h2 id="From%20Windows">From Windows</h2>

<p>Windows won&#39;t let you find your product key from the settings or from the control panel &#8212; well, at least I couldn&#39;t find it.
Fortunately, there is a command you can type in an administrator command prompt (cmd or Powershell, ran as administrator).</p>

<pre><code>wmic path softwarelicensingservice get OA3xOriginalProductKey
</code></pre>

<h2 id="From%20Linux">From Linux</h2>

<p>You can get your Windows product key from a simple pseudo-file: <code>&#47;sys&#47;firmware&#47;acpi&#47;tables&#47;MSDM</code>.
Just use <code>more</code>, or <code>cat</code>, or whatever you want to read it&#39;s content.</p>

<pre><code>sudo cat &#47;sys&#47;firmware&#47;acpi&#47;tables&#47;MSDM
</code></pre>

<p>The file contains a bit more than the product key, but the product key is present.
It is formatted as such: <code>XXXXX-XXXXX-XXXXX-XXXXX-XXXXX</code>, at the end of the file.</p>
]]>
</description>
</item>
<item>
<title>Give these software a shot!</title>
<guid>https://yoannlr.github.io/blog/links.html</guid>
<pubDate>Fri, 20 Aug 2021 23:14:09 +0200</pubDate>
<description>
<![CDATA[
<h1 id="Give%20these%20software%20a%20shot!">Give these software a shot!</h1>
<p class="date">20 Aug 2021</p>


<p>Here are some software&#47;websites&#47;tools I find and want to share!
It&#39;s permanently updated.</p>

<h2 id="Linux">Linux</h2>

<ul>
<li><a href="https://vim.org">&starf; &hearts; Vim - text editor</a></li>
<li><a href="https://audacious-media-player.org">&starf; Audacious - lightweight but full-featured music player</a></li>
<li><a href="https://brave.com">&starf; Brave - web browser</a></li>
<li><a href="https://mpv.io">&starf; mpv - video player</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Sxiv">&starf; sxiv - image viewer</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Zathura">&starf; zathura - pdf reader (can read from stdin)</a></li>
<li><a href="https://www.qemu.org">&starf; qemu - virtual machines</a></li>
<li><a href="https://ardour.org">&starf; Ardour - audio editor</a></li>
<li><a href="https://obsproject.com">&starf; OBS Studio - screen recorder, can livestream too</a></li>
<li><a href="https://olivevideoeditor.org">&starf; Olive - video editor</a></li>
<li><a href="https://ffmpeg.org">&starf; ffmpeg - manipulate video from command line</a></li>
<li><a href="https://blender.org">&starf; Blender - 3D modeling, video editing</a></li>
<li><a href="https://gimp.org">&starf; GIMP - image editor</a></li>
<li><a href="https://krita.org">&starf; Krita - drawing</a></li>
<li><a href="https://lmms.io">&starf; LMMS - music creation</a></li>
<li><a href="https://kristaps.bsd.lv/lowdown/">&starf; lowdown - lightweight markdown compiler (I use it to run this blog!)</a></li>
<li><a href="https://wiki.archlinux.org/index.php/Newsboat">&starf; newsboat - RSS Feed reader</a></li>
<li><a href="https://youtube-dl.org/">&starf; youtube-dl - download videos from a large collection of websites</a></li>
<li><a href="http://sonic-pi.net">Sonic-Pi - create music by programming (not tested)</a></li>
<li><a href="https://github.com/andmarti1424/sc-im">sc-im - spreadsheets in terminal</a></li>
<li><a href="https://github.com/visit1985/mdp">&starf; mdp - present markdown slides from terminal</a></li>
<li><a href="https://github.com/aidygus/LinVAM">LinVAM - Linux voice recognition (not tested)</a></li>
<li><a href="https://github.com/futpib/pagraphcontrol">pagraphcontrol - route sound with PulseAudio (not tested)</a></li>
<li><a href="https://github.com/ventoy/Ventoy">&starf; Ventoy - one bootable media for all your ISO files!</a></li>
<li><a href="https://lutris.net">&starf; Lutris - the future of gaming on Linux</a></li>
<li><a href="https://github.com/debauchee/barrier">barrier - software KVM switch (not tested)</a> - <a href="https://www.youtube.com/watch?v=mAGTFAeA2Bo">Video</a></li>
<li><a href="https://github.com/CatxFish/obs-v4l2sink">obs-v4l2sink - use OBS output as a virtual camera</a> - <a href="https://www.youtube.com/watch?v=Eca509IDLdM">Video</a></li>
<li><a href="https://github.com/HaarigerHarald/omxiv">omxiv - an alternative to &#8220;Chromecast&#8221;</a> - <a href="https://thepi.io/how-to-use-your-raspberry-pi-as-a-chromecast-alternative/">Tutorial</a></li>
<li><a href="https://github.com/chxrlt/lyrebird">Experimental - lyrebird - change your voice with PulseAudio</a></li>
<li><a href="https://github.com/Genymobile/scrcpy">&starf; scrcpy - Android screen copy (with ADB)</a></li>
<li><a href="https://github.com/carykh/jumpcutter">jumpcutter - automate video editing (not tested)</a></li>
<li><a href="https://github.com/exeldro/obs-move-transition">obs-move-transition - better transitions in OBS</a></li>
<li><a href="https://github.com/LibreSprite/LibreSprite">LibreSprite - FOSS alternative to Aseprite (a pixel art program)</a></li>
<li><a href="https://github.com/FreeTubeApp/FreeTube">FreeTube - alternative YouTube front-end (it&#39;s an app)</a></li>
</ul>

<h2 id="Windows">Windows</h2>

<ul>
<li><a href="https://captvty.fr/">CapTvTy - download replays of french TV</a></li>
<li><a href="https://ephtracy.github.io/">MagicaVoxel - 3d pixel art</a></li>
<li><a href="https://www.sumatrapdfreader.org/">Sumatra PDF - minimalist pdf reader</a></li>
</ul>

<h2 id="Bulk%20websites&amp;#47;pages">Bulk websites&#47;pages</h2>

<ul>
<li><a href="https://archive.org">archive.org - a library of books, music, videos, websites&#8230;</a></li>
<li><a href="http://www.neverendingchartrendering.org/">Never Ending Chart Rendering - album covers compilation</a></li>
<li><a href="http://maps.openrouteservice.org/">OpenRouteService - an alternative to Google Maps</a></li>
<li><a href="https://f-droid.org/fr/">&starf; F-Droid - an alternative to Google Play Store, with open-source apps</a></li>
<li><a href="https://github.com/tldr-pages/tldr">TLDR-Pages - summary from Linux man pages</a></li>
<li><a href="https://www.overleaf.com/learn">Overleaf - learn LaTeX</a></li>
<li><a href="https://mathpix.com/">Mathpix - convert in-real-life math to TeX</a></li>
<li><a href="http://www.yopmail.com">&starf; Yopmail - throwaway email addresses</a></li>
<li><a href="https://framatalk.org">FramaTalk - screen sharing without any account</a></li>
<li><a href="https://devdocs.io/">DevDocs - documentation for a lot of programming tools &#38; languages</a></li>
<li><a href="https://trianglify.io/">Trianfly.io - generate backgrounds with&#8230; triangles</a></li>
<li><a href="http://cssicon.space/">CSS Icon - use CSS for your website&#39;s icons</a></li>
<li><a href="https://www.songsterr.com">&starf; Songsterr - music tablatures</a></li>
<li><a href="https://www.fontsquirrel.com/tools/webfont-generator">FontSquirrel - convert fonts to web format</a></li>
<li><a href="https://github.com/the-akira/Computer-Science-Resources">Computer Science Resources</a></li>
<li><a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">Vi&#47;Vim cheatsheet</a></li>
<li><a href="https://rendaw.gitlab.io/blog/2125f09a85f2.html#alsa-exposed">&#8220;rendaw - ALSA, exposed!&#8220; - ALSA Linux sound system documentation</a></li>
<li><a href="https://plantnet.org">Plantet - idenfity plants</a></li>
<li><a href="https://github.com/mayfrost/guides/blob/master/ALTERNATIVES.md">Alternatives to bloatware - another list of software, like this one!</a></li>
</ul>

<h2 id="Android%20Apps">Android Apps</h2>

<ul>
<li><a href="https://lineageos.org/">LineageOS - ungoogled Android</a></li>
<li><a href="https://e.foundation/">&#47;e&#47; - ungoogled Android (a fork of LineageOS), the one I use</a></li>
<li><a href="https://f-droid.org/">&starf; F-Droid - an alternative to Google Play Store</a></li>
<li><a href="https://f-droid.org/en/packages/org.schabi.newpipe/">&starf; NewPipe - an alternative to YouTube with download and background listening options, based off youtube-dl</a></li>
<li><a href="https://f-droid.org/en/packages/org.billthefarmer.editor">&starf; Editor - text editor</a></li>
<li><a href="https://f-droid.org/en/packages/com.simplemobiletools.gallery.pro">&starf; Simple Gallery Pro - photo gallery</a></li>
<li><a href="https://f-droid.org/en/packages/org.kde.kdeconnect_tp">&starf; KDE Connect - connect a phone to Linux</a></li>
<li><a href="https://world.openfoodfacts.org/files/off.apk">&starf; Open Food Facts - barcode food scan</a> - <a href="https://play.google.com/store/apps/details?id=org.openfoodfacts.scanner">Play Store</a></li>
</ul>

<h2 id="Videos,%20blogs">Videos, blogs</h2>

<ul>
<li><a href="https://youtube.com/c/lukesmithxyz">Luke Smith (YouTube) - Linux tutorials, and some philosophy</a></li>
<li><a href="https://lukesmith.xyz">Luke Smith (website)</a></li>
<li><a href="https://www.youtube.com/c/WolfgangsChannel/">Wolfgang&#39;s Channel - tech tinkering</a></li>
</ul>
]]>
</description>
</item>
</channel>
</rss>
